
前几节课程我们学习了如何向量化，如何使用内置函数避免使用显示for循环可以让代码运行速度显著加快，我们再来看几个例子。

需要记住的经验是：当编写新的网络时或者做的只是回归，那么一定要尽量避免使用for循环，能不用就不用。如果可以使用一个内置函数或者找出其他办法去计算循环，通常会比直接使用for循环来的更快。

如果想计算一个向量u作为矩阵A和另一个向量v的乘积，矩阵乘法的定义就是：

[公式]

[公式]

很明显上述过程中有一个双重for循环,对指标 [公式] 进行循环。以上是一个非向量化版本。

对应的向量化版本仅需： [公式] ,消除了两个不同的for循环，代码执行速度会更快。

再来看另外一个例子： [公式] ,如果我们性做指数运算，作用到向量V的每个元素：

[公式]

事实上python的numpy模块有很多内置函数，仅需调用单个函数就可实现上述操作 ：

[公式]

注意以上操作就避免了显示for循环，且仅需一行代码。所以每当想写一个for循环时，先考虑能否使用numpy中的内置函数进行替代。将以上思想应用到logistic回归梯度下降算法实现中：

[公式]

以上有两个for循环，一个是对样本的遍历，另一个是对特征的变量，上述以两个特征为例。 若有多个特征我们需要使用for循环处理 [公式] 。尝试把对特征的训练向量化表示，不需要初始化 [公式] ,令 [公式] 维向量， [公式] ,最后有 [公式] 。至此我们从两个for循环简化为了一个for循环。

因公式格式问题，完整博文详见知乎：https://zhuanlan.zhihu.com/p/407555156
